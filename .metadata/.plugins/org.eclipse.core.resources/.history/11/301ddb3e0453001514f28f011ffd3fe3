// Generated from DecafLexer.g4 by ANTLR 4.4

	import java.util.Map;
	import java.util.HashMap;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DecafLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		CLASS=1, PROGRAM=2, IF=3, ELSE=4, FOR=5, RETURN=6, BREAK=7, CONTINUE=8, 
		CALLOUT=9, BOOLEAN=10, TRUE=11, FALSE=12, INT=13, VOID=14, HEX_PRFEFIX=15, 
		INT_LITERAL=16, BOOL_LITERAL=17, IDENTIIER=18, BRACKET_OPEN=19, BRACKET_CLOSE=20, 
		SQUARE_BRACKET_OPEN=21, SQUARE_BRACKET_CLOSE=22, COMMA=23, SEMICOLON=24, 
		PARENTHESIS_OPEN=25, PARENTHESIS_CLOSE=26, ASSIGN_OP=27, ARITH_OP=28, 
		RELOP=29, EQ_OP=30, COND_OP=31, WHITESPACE=32, BLOCK_COMMENT=33, EOL_COMMENT=34, 
		CHAR_LITERAL=35, STRING_LITERAL=36;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'"
	};
	public static final String[] ruleNames = {
		"DECIMAL_LITERAL", "HEX_LITERAL", "HEX_PRFEFIX", "INT_LITERAL", "BOOL_LITERAL", 
		"ALPHA", "DIGIT", "ALPHA_NUM", "HEX_DIGIT", "ID", "IDENTIIER", "BRACKET_OPEN", 
		"BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", "COMMA", 
		"SEMICOLON", "PARENTHESIS_OPEN", "PARENTHESIS_CLOSE", "ASSIGN_OP", "ARITH_OP", 
		"RELOP", "EQ_OP", "COND_OP", "WHITESPACE", "BLOCK_COMMENT", "EOL_COMMENT", 
		"CHAR", "CHAR_LITERAL", "STRING_LITERAL"
	};


		
		public static final int SHOULD_SHOW = 100;
		
		Map<String, Integer> keywords = new HashMap<String, Integer>();/*{{
			put("class", DecafParser.CLASS);
			put("Program", DecafParser.PROGRAM);
			put("if", DecafParser.IF);
			put("else", DecafParser.ELSE);
			put("for", DecafParser.FOR);
			put("return", DecafParser.RETURN);
			put("break", DecafParser.BREAK);
			put("continue", DecafParser.CONTINUE);
			put("callout", DecafParser.CALLOUT);
			put("boolean", DecafParser.BOOLEAN);
			put("true", DecafParser.TRUE);
			put("false", DecafParser.FALSE);
			put("int", DecafParser.INT);
			put("void", DecafParser.VOID);		
		}};*/


	public DecafLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "DecafLexer.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 3: INT_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 4: BOOL_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 10: IDENTIIER_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void INT_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: _channel = SHOULD_SHOW; break;
		}
	}
	private void BOOL_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: _channel = SHOULD_SHOW; break;
		}
	}
	private void IDENTIIER_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  
			if(keywords.containsKey(getText())){
				setType(keywords.get(getText()));
			}
			else{
				_channel = SHOULD_SHOW;
			}
		 break;
		}
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2&\u00d5\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\3\2\6\2A"+
		"\n\2\r\2\16\2B\3\3\3\3\6\3G\n\3\r\3\16\3H\3\4\3\4\3\4\3\5\3\5\5\5P\n\5"+
		"\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6]\n\6\3\6\3\6\3\7\5\7"+
		"b\n\7\3\b\3\b\3\t\3\t\5\th\n\t\3\n\3\n\5\nl\n\n\3\13\3\13\7\13p\n\13\f"+
		"\13\16\13s\13\13\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21"+
		"\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3\25\3\25\5\25\u008d"+
		"\n\25\3\26\3\26\3\27\3\27\3\27\3\27\3\27\5\27\u0096\n\27\3\30\3\30\3\30"+
		"\3\30\5\30\u009c\n\30\3\31\3\31\3\31\3\31\5\31\u00a2\n\31\3\32\6\32\u00a5"+
		"\n\32\r\32\16\32\u00a6\3\32\3\32\3\33\3\33\3\33\3\33\7\33\u00af\n\33\f"+
		"\33\16\33\u00b2\13\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\7\34"+
		"\u00bd\n\34\f\34\16\34\u00c0\13\34\3\34\3\34\3\34\3\34\3\35\5\35\u00c7"+
		"\n\35\3\36\3\36\3\36\3\36\3\37\3\37\7\37\u00cf\n\37\f\37\16\37\u00d2\13"+
		"\37\3\37\3\37\4\u00b0\u00be\2 \3\2\5\2\7\21\t\22\13\23\r\2\17\2\21\2\23"+
		"\2\25\2\27\24\31\25\33\26\35\27\37\30!\31#\32%\33\'\34)\35+\36-\37/ \61"+
		"!\63\"\65#\67$9\2;%=&\3\2\b\5\2C\\aac|\4\2CHch\6\2\'\',-//\61\61\4\2>"+
		">@@\5\2\13\f\16\17\"\"\4\2\13\f\"\u0080\u00dd\2\7\3\2\2\2\2\t\3\2\2\2"+
		"\2\13\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37"+
		"\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3"+
		"\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2"+
		"\67\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\3@\3\2\2\2\5D\3\2\2\2\7J\3\2\2\2\tO"+
		"\3\2\2\2\13\\\3\2\2\2\ra\3\2\2\2\17c\3\2\2\2\21g\3\2\2\2\23k\3\2\2\2\25"+
		"m\3\2\2\2\27t\3\2\2\2\31w\3\2\2\2\33y\3\2\2\2\35{\3\2\2\2\37}\3\2\2\2"+
		"!\177\3\2\2\2#\u0081\3\2\2\2%\u0083\3\2\2\2\'\u0085\3\2\2\2)\u008c\3\2"+
		"\2\2+\u008e\3\2\2\2-\u0095\3\2\2\2/\u009b\3\2\2\2\61\u00a1\3\2\2\2\63"+
		"\u00a4\3\2\2\2\65\u00aa\3\2\2\2\67\u00b8\3\2\2\29\u00c6\3\2\2\2;\u00c8"+
		"\3\2\2\2=\u00cc\3\2\2\2?A\5\17\b\2@?\3\2\2\2AB\3\2\2\2B@\3\2\2\2BC\3\2"+
		"\2\2C\4\3\2\2\2DF\5\7\4\2EG\5\23\n\2FE\3\2\2\2GH\3\2\2\2HF\3\2\2\2HI\3"+
		"\2\2\2I\6\3\2\2\2JK\7\62\2\2KL\7z\2\2L\b\3\2\2\2MP\5\3\2\2NP\5\5\3\2O"+
		"M\3\2\2\2ON\3\2\2\2PQ\3\2\2\2QR\b\5\2\2R\n\3\2\2\2ST\7v\2\2TU\7t\2\2U"+
		"V\7w\2\2V]\7g\2\2WX\7h\2\2XY\7c\2\2YZ\7n\2\2Z[\7u\2\2[]\7g\2\2\\S\3\2"+
		"\2\2\\W\3\2\2\2]^\3\2\2\2^_\b\6\3\2_\f\3\2\2\2`b\t\2\2\2a`\3\2\2\2b\16"+
		"\3\2\2\2cd\4\62;\2d\20\3\2\2\2eh\5\r\7\2fh\5\17\b\2ge\3\2\2\2gf\3\2\2"+
		"\2h\22\3\2\2\2il\5\17\b\2jl\t\3\2\2ki\3\2\2\2kj\3\2\2\2l\24\3\2\2\2mq"+
		"\5\r\7\2np\5\21\t\2on\3\2\2\2ps\3\2\2\2qo\3\2\2\2qr\3\2\2\2r\26\3\2\2"+
		"\2sq\3\2\2\2tu\5\25\13\2uv\b\f\4\2v\30\3\2\2\2wx\7}\2\2x\32\3\2\2\2yz"+
		"\7\177\2\2z\34\3\2\2\2{|\7]\2\2|\36\3\2\2\2}~\7_\2\2~ \3\2\2\2\177\u0080"+
		"\7.\2\2\u0080\"\3\2\2\2\u0081\u0082\7=\2\2\u0082$\3\2\2\2\u0083\u0084"+
		"\7*\2\2\u0084&\3\2\2\2\u0085\u0086\7+\2\2\u0086(\3\2\2\2\u0087\u008d\7"+
		"?\2\2\u0088\u0089\7-\2\2\u0089\u008d\7?\2\2\u008a\u008b\7/\2\2\u008b\u008d"+
		"\7?\2\2\u008c\u0087\3\2\2\2\u008c\u0088\3\2\2\2\u008c\u008a\3\2\2\2\u008d"+
		"*\3\2\2\2\u008e\u008f\t\4\2\2\u008f,\3\2\2\2\u0090\u0096\t\5\2\2\u0091"+
		"\u0092\7>\2\2\u0092\u0096\7?\2\2\u0093\u0094\7@\2\2\u0094\u0096\7?\2\2"+
		"\u0095\u0090\3\2\2\2\u0095\u0091\3\2\2\2\u0095\u0093\3\2\2\2\u0096.\3"+
		"\2\2\2\u0097\u0098\7?\2\2\u0098\u009c\7?\2\2\u0099\u009a\7#\2\2\u009a"+
		"\u009c\7?\2\2\u009b\u0097\3\2\2\2\u009b\u0099\3\2\2\2\u009c\60\3\2\2\2"+
		"\u009d\u009e\7(\2\2\u009e\u00a2\7(\2\2\u009f\u00a0\7~\2\2\u00a0\u00a2"+
		"\7~\2\2\u00a1\u009d\3\2\2\2\u00a1\u009f\3\2\2\2\u00a2\62\3\2\2\2\u00a3"+
		"\u00a5\t\6\2\2\u00a4\u00a3\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00a4\3\2"+
		"\2\2\u00a6\u00a7\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8\u00a9\b\32\5\2\u00a9"+
		"\64\3\2\2\2\u00aa\u00ab\7\61\2\2\u00ab\u00ac\7,\2\2\u00ac\u00b0\3\2\2"+
		"\2\u00ad\u00af\13\2\2\2\u00ae\u00ad\3\2\2\2\u00af\u00b2\3\2\2\2\u00b0"+
		"\u00b1\3\2\2\2\u00b0\u00ae\3\2\2\2\u00b1\u00b3\3\2\2\2\u00b2\u00b0\3\2"+
		"\2\2\u00b3\u00b4\7,\2\2\u00b4\u00b5\7\61\2\2\u00b5\u00b6\3\2\2\2\u00b6"+
		"\u00b7\b\33\5\2\u00b7\66\3\2\2\2\u00b8\u00b9\7\61\2\2\u00b9\u00ba\7\61"+
		"\2\2\u00ba\u00be\3\2\2\2\u00bb\u00bd\13\2\2\2\u00bc\u00bb\3\2\2\2\u00bd"+
		"\u00c0\3\2\2\2\u00be\u00bf\3\2\2\2\u00be\u00bc\3\2\2\2\u00bf\u00c1\3\2"+
		"\2\2\u00c0\u00be\3\2\2\2\u00c1\u00c2\7\f\2\2\u00c2\u00c3\3\2\2\2\u00c3"+
		"\u00c4\b\34\5\2\u00c48\3\2\2\2\u00c5\u00c7\t\7\2\2\u00c6\u00c5\3\2\2\2"+
		"\u00c7:\3\2\2\2\u00c8\u00c9\7)\2\2\u00c9\u00ca\59\35\2\u00ca\u00cb\7)"+
		"\2\2\u00cb<\3\2\2\2\u00cc\u00d0\7$\2\2\u00cd\u00cf\59\35\2\u00ce\u00cd"+
		"\3\2\2\2\u00cf\u00d2\3\2\2\2\u00d0\u00ce\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1"+
		"\u00d3\3\2\2\2\u00d2\u00d0\3\2\2\2\u00d3\u00d4\7$\2\2\u00d4>\3\2\2\2\24"+
		"\2BHO\\agkq\u008c\u0095\u009b\u00a1\u00a6\u00b0\u00be\u00c6\u00d0\6\3"+
		"\5\3\3\6\4\3\f\2\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}