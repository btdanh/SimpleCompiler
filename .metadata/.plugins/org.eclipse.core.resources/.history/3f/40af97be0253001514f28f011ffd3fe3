// Generated from DecafLexer.g4 by ANTLR 4.4

	import java.util.Map;
	import java.util.HashMap;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DecafLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		CLASS=1, PROGRAM=2, IF=3, ELSE=4, FOR=5, RETURN=6, BREAK=7, CONTINUE=8, 
		CALLOUT=9, BOOLEAN=10, TRUE=11, FALSE=12, INT=13, VOID=14, HEX_PRFEFIX=15, 
		INT_LITERAL=16, BOOL_LITERAL=17, IDENTIIER=18, BRACKET_OPEN=19, BRACKET_CLOSE=20, 
		SQUARE_BRACKET_OPEN=21, SQUARE_BRACKET_CLOSE=22, COMMA=23, SEMICOLON=24, 
		PARENTHESIS_OPEN=25, PARENTHESIS_CLOSE=26, WHITESPACE=27, BLOCK_COMMENT=28, 
		EOL_COMMENT=29, CHAR_LITERAL=30, STRING_LITERAL=31;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'"
	};
	public static final String[] ruleNames = {
		"DECIMAL_LITERAL", "HEX_LITERAL", "HEX_PRFEFIX", "INT_LITERAL", "BOOL_LITERAL", 
		"ALPHA", "DIGIT", "ALPHA_NUM", "HEX_DIGIT", "ID", "IDENTIIER", "BRACKET_OPEN", 
		"BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", "COMMA", 
		"SEMICOLON", "PARENTHESIS_OPEN", "PARENTHESIS_CLOSE", "WHITESPACE", "BLOCK_COMMENT", 
		"EOL_COMMENT", "CHAR", "CHAR_LITERAL", "STRING_LITERAL"
	};


		
		public static final int SHOULD_SHOW = 100;
		
		Map<String, Integer> keywords = new HashMap<String, Integer>(){{
			put("class", DecafParser.CLASS);
			put("Program", DecafParser.PROGRAM);
			put("if", DecafParser.IF);
			put("else", DecafParser.ELSE);
			put("for", DecafParser.FOR);
			put("return", DecafParser.RETURN);
			put("break", DecafParser.BREAK);
			put("continue", DecafParser.CONTINUE);
			put("callout", DecafParser.CALLOUT);
			put("boolean", DecafParser.BOOLEAN);
			put("true", DecafParser.TRUE);
			put("false", DecafParser.FALSE);
			put("int", DecafParser.INT);
			put("void", DecafParser.VOID);		
		}};


	public DecafLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "DecafLexer.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 3: INT_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 4: BOOL_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 10: IDENTIIER_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void INT_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: _channel = SHOULD_SHOW; break;
		}
	}
	private void BOOL_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: _channel = SHOULD_SHOW; break;
		}
	}
	private void IDENTIIER_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  
			if(keywords.containsKey(getText())){
				setType(keywords.get(getText()));
			}
			else{
				_channel = SHOULD_SHOW;
			}
		 break;
		}
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2!\u00af\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\3\2\6\2\67\n\2\r\2\16\28\3\3\3\3\6\3=\n\3\r\3\16\3>\3\4\3\4"+
		"\3\4\3\5\3\5\5\5F\n\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6"+
		"S\n\6\3\6\3\6\3\7\5\7X\n\7\3\b\3\b\3\t\3\t\5\t^\n\t\3\n\3\n\5\nb\n\n\3"+
		"\13\3\13\7\13f\n\13\f\13\16\13i\13\13\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3"+
		"\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\6\25\177"+
		"\n\25\r\25\16\25\u0080\3\25\3\25\3\26\3\26\3\26\3\26\7\26\u0089\n\26\f"+
		"\26\16\26\u008c\13\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\7\27"+
		"\u0097\n\27\f\27\16\27\u009a\13\27\3\27\3\27\3\27\3\27\3\30\5\30\u00a1"+
		"\n\30\3\31\3\31\3\31\3\31\3\32\3\32\7\32\u00a9\n\32\f\32\16\32\u00ac\13"+
		"\32\3\32\3\32\4\u008a\u0098\2\33\3\2\5\2\7\21\t\22\13\23\r\2\17\2\21\2"+
		"\23\2\25\2\27\24\31\25\33\26\35\27\37\30!\31#\32%\33\'\34)\35+\36-\37"+
		"/\2\61 \63!\3\2\6\5\2C\\aac|\4\2CHch\5\2\13\f\16\17\"\"\4\2\13\f\"\u0080"+
		"\u00b1\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2"+
		"\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2"+
		"\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2\61\3\2\2\2\2\63\3\2"+
		"\2\2\3\66\3\2\2\2\5:\3\2\2\2\7@\3\2\2\2\tE\3\2\2\2\13R\3\2\2\2\rW\3\2"+
		"\2\2\17Y\3\2\2\2\21]\3\2\2\2\23a\3\2\2\2\25c\3\2\2\2\27j\3\2\2\2\31m\3"+
		"\2\2\2\33o\3\2\2\2\35q\3\2\2\2\37s\3\2\2\2!u\3\2\2\2#w\3\2\2\2%y\3\2\2"+
		"\2\'{\3\2\2\2)~\3\2\2\2+\u0084\3\2\2\2-\u0092\3\2\2\2/\u00a0\3\2\2\2\61"+
		"\u00a2\3\2\2\2\63\u00a6\3\2\2\2\65\67\5\17\b\2\66\65\3\2\2\2\678\3\2\2"+
		"\28\66\3\2\2\289\3\2\2\29\4\3\2\2\2:<\5\7\4\2;=\5\23\n\2<;\3\2\2\2=>\3"+
		"\2\2\2><\3\2\2\2>?\3\2\2\2?\6\3\2\2\2@A\7\62\2\2AB\7z\2\2B\b\3\2\2\2C"+
		"F\5\3\2\2DF\5\5\3\2EC\3\2\2\2ED\3\2\2\2FG\3\2\2\2GH\b\5\2\2H\n\3\2\2\2"+
		"IJ\7v\2\2JK\7t\2\2KL\7w\2\2LS\7g\2\2MN\7h\2\2NO\7c\2\2OP\7n\2\2PQ\7u\2"+
		"\2QS\7g\2\2RI\3\2\2\2RM\3\2\2\2ST\3\2\2\2TU\b\6\3\2U\f\3\2\2\2VX\t\2\2"+
		"\2WV\3\2\2\2X\16\3\2\2\2YZ\4\62;\2Z\20\3\2\2\2[^\5\r\7\2\\^\5\17\b\2]"+
		"[\3\2\2\2]\\\3\2\2\2^\22\3\2\2\2_b\5\17\b\2`b\t\3\2\2a_\3\2\2\2a`\3\2"+
		"\2\2b\24\3\2\2\2cg\5\r\7\2df\5\21\t\2ed\3\2\2\2fi\3\2\2\2ge\3\2\2\2gh"+
		"\3\2\2\2h\26\3\2\2\2ig\3\2\2\2jk\5\25\13\2kl\b\f\4\2l\30\3\2\2\2mn\7}"+
		"\2\2n\32\3\2\2\2op\7\177\2\2p\34\3\2\2\2qr\7]\2\2r\36\3\2\2\2st\7_\2\2"+
		"t \3\2\2\2uv\7.\2\2v\"\3\2\2\2wx\7=\2\2x$\3\2\2\2yz\7*\2\2z&\3\2\2\2{"+
		"|\7+\2\2|(\3\2\2\2}\177\t\4\2\2~}\3\2\2\2\177\u0080\3\2\2\2\u0080~\3\2"+
		"\2\2\u0080\u0081\3\2\2\2\u0081\u0082\3\2\2\2\u0082\u0083\b\25\5\2\u0083"+
		"*\3\2\2\2\u0084\u0085\7\61\2\2\u0085\u0086\7,\2\2\u0086\u008a\3\2\2\2"+
		"\u0087\u0089\13\2\2\2\u0088\u0087\3\2\2\2\u0089\u008c\3\2\2\2\u008a\u008b"+
		"\3\2\2\2\u008a\u0088\3\2\2\2\u008b\u008d\3\2\2\2\u008c\u008a\3\2\2\2\u008d"+
		"\u008e\7,\2\2\u008e\u008f\7\61\2\2\u008f\u0090\3\2\2\2\u0090\u0091\b\26"+
		"\5\2\u0091,\3\2\2\2\u0092\u0093\7\61\2\2\u0093\u0094\7\61\2\2\u0094\u0098"+
		"\3\2\2\2\u0095\u0097\13\2\2\2\u0096\u0095\3\2\2\2\u0097\u009a\3\2\2\2"+
		"\u0098\u0099\3\2\2\2\u0098\u0096\3\2\2\2\u0099\u009b\3\2\2\2\u009a\u0098"+
		"\3\2\2\2\u009b\u009c\7\f\2\2\u009c\u009d\3\2\2\2\u009d\u009e\b\27\5\2"+
		"\u009e.\3\2\2\2\u009f\u00a1\t\5\2\2\u00a0\u009f\3\2\2\2\u00a1\60\3\2\2"+
		"\2\u00a2\u00a3\7)\2\2\u00a3\u00a4\5/\30\2\u00a4\u00a5\7)\2\2\u00a5\62"+
		"\3\2\2\2\u00a6\u00aa\7$\2\2\u00a7\u00a9\5/\30\2\u00a8\u00a7\3\2\2\2\u00a9"+
		"\u00ac\3\2\2\2\u00aa\u00a8\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab\u00ad\3\2"+
		"\2\2\u00ac\u00aa\3\2\2\2\u00ad\u00ae\7$\2\2\u00ae\64\3\2\2\2\20\28>ER"+
		"W]ag\u0080\u008a\u0098\u00a0\u00aa\6\3\5\3\3\6\4\3\f\2\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}