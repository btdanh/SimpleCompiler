// Generated from DecafParser.g4 by ANTLR 4.4

	import java.util.Map;
	import java.util.HashMap;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DecafParserLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__2=1, T__1=2, T__0=3, HEX_PRFEFIX=4, INT_LITERAL=5, BOOL_LITERAL=6, 
		IDENTIIER=7, BRACKET_OPEN=8, BRACKET_CLOSE=9, SQUARE_BRACKET_OPEN=10, 
		SQUARE_BRACKET_CLOSE=11, COMMA=12, SEMICOLON=13, PARENTHESIS_OPEN=14, 
		PARENTHESIS_CLOSE=15, ASSIGN_OP=16, ARITH_OP=17, RELOP=18, EQ_OP=19, COND_OP=20, 
		WHITESPACE=21, BLOCK_COMMENT=22, EOL_COMMENT=23, CHAR_LITERAL=24, STRING_LITERAL=25;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'"
	};
	public static final String[] ruleNames = {
		"T__2", "T__1", "T__0", "DECIMAL_LITERAL", "HEX_LITERAL", "HEX_PRFEFIX", 
		"INT_LITERAL", "BOOL_LITERAL", "ALPHA", "DIGIT", "ALPHA_NUM", "HEX_DIGIT", 
		"ID", "IDENTIIER", "BRACKET_OPEN", "BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", 
		"SQUARE_BRACKET_CLOSE", "COMMA", "SEMICOLON", "PARENTHESIS_OPEN", "PARENTHESIS_CLOSE", 
		"ASSIGN_OP", "ARITH_OP", "RELOP", "EQ_OP", "COND_OP", "WHITESPACE", "BLOCK_COMMENT", 
		"EOL_COMMENT", "CHAR", "CHAR_LITERAL", "STRING_LITERAL"
	};


		
		public static final int SHOULD_SHOW = 100;
		
		Map<String, Integer> keywords = new HashMap<String, Integer>();{{
			put("class", DecafParser.CLASS);
			put("Program", DecafParser.PROGRAM);
			put("if", DecafParser.IF);
			put("else", DecafParser.ELSE);
			put("for", DecafParser.FOR);
			put("return", DecafParser.RETURN);
			put("break", DecafParser.BREAK);
			put("continue", DecafParser.CONTINUE);
			put("callout", DecafParser.CALLOUT);
			put("boolean", DecafParser.BOOLEAN);
			put("true", DecafParser.TRUE);
			put("false", DecafParser.FALSE);
			put("int", DecafParser.INT);
			put("void", DecafParser.VOID);		
		}};


	public DecafParserLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "DecafParser.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 6: INT_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 7: BOOL_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 13: IDENTIIER_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void INT_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: _channel = SHOULD_SHOW; break;
		}
	}
	private void BOOL_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: _channel = SHOULD_SHOW; break;
		}
	}
	private void IDENTIIER_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  
			if(keywords.containsKey(getText())){
				setType(keywords.get(getText()));
			}
			else{
				_channel = SHOULD_SHOW;
			}
		 break;
		}
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\33\u00e1\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\3\2\3\2\3\3\3\3\3\4\3\4\3\5\6\5M\n\5\r\5\16\5N\3\6\3\6"+
		"\6\6S\n\6\r\6\16\6T\3\7\3\7\3\7\3\b\3\b\5\b\\\n\b\3\b\3\b\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\3\t\5\ti\n\t\3\t\3\t\3\n\5\nn\n\n\3\13\3\13\3\f\3"+
		"\f\5\ft\n\f\3\r\3\r\5\rx\n\r\3\16\3\16\7\16|\n\16\f\16\16\16\177\13\16"+
		"\3\17\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25"+
		"\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\30\3\30\5\30\u0099\n\30\3\31"+
		"\3\31\3\32\3\32\3\32\3\32\3\32\5\32\u00a2\n\32\3\33\3\33\3\33\3\33\5\33"+
		"\u00a8\n\33\3\34\3\34\3\34\3\34\5\34\u00ae\n\34\3\35\6\35\u00b1\n\35\r"+
		"\35\16\35\u00b2\3\35\3\35\3\36\3\36\3\36\3\36\7\36\u00bb\n\36\f\36\16"+
		"\36\u00be\13\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\7\37\u00c9"+
		"\n\37\f\37\16\37\u00cc\13\37\3\37\3\37\3\37\3\37\3 \5 \u00d3\n \3!\3!"+
		"\3!\3!\3\"\3\"\7\"\u00db\n\"\f\"\16\"\u00de\13\"\3\"\3\"\4\u00bc\u00ca"+
		"\2#\3\3\5\4\7\5\t\2\13\2\r\6\17\7\21\b\23\2\25\2\27\2\31\2\33\2\35\t\37"+
		"\n!\13#\f%\r\'\16)\17+\20-\21/\22\61\23\63\24\65\25\67\269\27;\30=\31"+
		"?\2A\32C\33\3\2\b\5\2C\\aac|\4\2CHch\6\2\'\',-//\61\61\4\2>>@@\5\2\13"+
		"\f\16\17\"\"\4\2\13\f\"\u0080\u00e9\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2"+
		"\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!"+
		"\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3"+
		"\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2"+
		"\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\3E\3\2\2\2\5G"+
		"\3\2\2\2\7I\3\2\2\2\tL\3\2\2\2\13P\3\2\2\2\rV\3\2\2\2\17[\3\2\2\2\21h"+
		"\3\2\2\2\23m\3\2\2\2\25o\3\2\2\2\27s\3\2\2\2\31w\3\2\2\2\33y\3\2\2\2\35"+
		"\u0080\3\2\2\2\37\u0083\3\2\2\2!\u0085\3\2\2\2#\u0087\3\2\2\2%\u0089\3"+
		"\2\2\2\'\u008b\3\2\2\2)\u008d\3\2\2\2+\u008f\3\2\2\2-\u0091\3\2\2\2/\u0098"+
		"\3\2\2\2\61\u009a\3\2\2\2\63\u00a1\3\2\2\2\65\u00a7\3\2\2\2\67\u00ad\3"+
		"\2\2\29\u00b0\3\2\2\2;\u00b6\3\2\2\2=\u00c4\3\2\2\2?\u00d2\3\2\2\2A\u00d4"+
		"\3\2\2\2C\u00d8\3\2\2\2EF\7/\2\2F\4\3\2\2\2GH\7?\2\2H\6\3\2\2\2IJ\7#\2"+
		"\2J\b\3\2\2\2KM\5\25\13\2LK\3\2\2\2MN\3\2\2\2NL\3\2\2\2NO\3\2\2\2O\n\3"+
		"\2\2\2PR\5\r\7\2QS\5\31\r\2RQ\3\2\2\2ST\3\2\2\2TR\3\2\2\2TU\3\2\2\2U\f"+
		"\3\2\2\2VW\7\62\2\2WX\7z\2\2X\16\3\2\2\2Y\\\5\t\5\2Z\\\5\13\6\2[Y\3\2"+
		"\2\2[Z\3\2\2\2\\]\3\2\2\2]^\b\b\2\2^\20\3\2\2\2_`\7v\2\2`a\7t\2\2ab\7"+
		"w\2\2bi\7g\2\2cd\7h\2\2de\7c\2\2ef\7n\2\2fg\7u\2\2gi\7g\2\2h_\3\2\2\2"+
		"hc\3\2\2\2ij\3\2\2\2jk\b\t\3\2k\22\3\2\2\2ln\t\2\2\2ml\3\2\2\2n\24\3\2"+
		"\2\2op\4\62;\2p\26\3\2\2\2qt\5\23\n\2rt\5\25\13\2sq\3\2\2\2sr\3\2\2\2"+
		"t\30\3\2\2\2ux\5\25\13\2vx\t\3\2\2wu\3\2\2\2wv\3\2\2\2x\32\3\2\2\2y}\5"+
		"\23\n\2z|\5\27\f\2{z\3\2\2\2|\177\3\2\2\2}{\3\2\2\2}~\3\2\2\2~\34\3\2"+
		"\2\2\177}\3\2\2\2\u0080\u0081\5\33\16\2\u0081\u0082\b\17\4\2\u0082\36"+
		"\3\2\2\2\u0083\u0084\7}\2\2\u0084 \3\2\2\2\u0085\u0086\7\177\2\2\u0086"+
		"\"\3\2\2\2\u0087\u0088\7]\2\2\u0088$\3\2\2\2\u0089\u008a\7_\2\2\u008a"+
		"&\3\2\2\2\u008b\u008c\7.\2\2\u008c(\3\2\2\2\u008d\u008e\7=\2\2\u008e*"+
		"\3\2\2\2\u008f\u0090\7*\2\2\u0090,\3\2\2\2\u0091\u0092\7+\2\2\u0092.\3"+
		"\2\2\2\u0093\u0099\7?\2\2\u0094\u0095\7-\2\2\u0095\u0099\7?\2\2\u0096"+
		"\u0097\7/\2\2\u0097\u0099\7?\2\2\u0098\u0093\3\2\2\2\u0098\u0094\3\2\2"+
		"\2\u0098\u0096\3\2\2\2\u0099\60\3\2\2\2\u009a\u009b\t\4\2\2\u009b\62\3"+
		"\2\2\2\u009c\u00a2\t\5\2\2\u009d\u009e\7>\2\2\u009e\u00a2\7?\2\2\u009f"+
		"\u00a0\7@\2\2\u00a0\u00a2\7?\2\2\u00a1\u009c\3\2\2\2\u00a1\u009d\3\2\2"+
		"\2\u00a1\u009f\3\2\2\2\u00a2\64\3\2\2\2\u00a3\u00a4\7?\2\2\u00a4\u00a8"+
		"\7?\2\2\u00a5\u00a6\7#\2\2\u00a6\u00a8\7?\2\2\u00a7\u00a3\3\2\2\2\u00a7"+
		"\u00a5\3\2\2\2\u00a8\66\3\2\2\2\u00a9\u00aa\7(\2\2\u00aa\u00ae\7(\2\2"+
		"\u00ab\u00ac\7~\2\2\u00ac\u00ae\7~\2\2\u00ad\u00a9\3\2\2\2\u00ad\u00ab"+
		"\3\2\2\2\u00ae8\3\2\2\2\u00af\u00b1\t\6\2\2\u00b0\u00af\3\2\2\2\u00b1"+
		"\u00b2\3\2\2\2\u00b2\u00b0\3\2\2\2\u00b2\u00b3\3\2\2\2\u00b3\u00b4\3\2"+
		"\2\2\u00b4\u00b5\b\35\5\2\u00b5:\3\2\2\2\u00b6\u00b7\7\61\2\2\u00b7\u00b8"+
		"\7,\2\2\u00b8\u00bc\3\2\2\2\u00b9\u00bb\13\2\2\2\u00ba\u00b9\3\2\2\2\u00bb"+
		"\u00be\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bd\u00bf\3\2"+
		"\2\2\u00be\u00bc\3\2\2\2\u00bf\u00c0\7,\2\2\u00c0\u00c1\7\61\2\2\u00c1"+
		"\u00c2\3\2\2\2\u00c2\u00c3\b\36\5\2\u00c3<\3\2\2\2\u00c4\u00c5\7\61\2"+
		"\2\u00c5\u00c6\7\61\2\2\u00c6\u00ca\3\2\2\2\u00c7\u00c9\13\2\2\2\u00c8"+
		"\u00c7\3\2\2\2\u00c9\u00cc\3\2\2\2\u00ca\u00cb\3\2\2\2\u00ca\u00c8\3\2"+
		"\2\2\u00cb\u00cd\3\2\2\2\u00cc\u00ca\3\2\2\2\u00cd\u00ce\7\f\2\2\u00ce"+
		"\u00cf\3\2\2\2\u00cf\u00d0\b\37\5\2\u00d0>\3\2\2\2\u00d1\u00d3\t\7\2\2"+
		"\u00d2\u00d1\3\2\2\2\u00d3@\3\2\2\2\u00d4\u00d5\7)\2\2\u00d5\u00d6\5?"+
		" \2\u00d6\u00d7\7)\2\2\u00d7B\3\2\2\2\u00d8\u00dc\7$\2\2\u00d9\u00db\5"+
		"? \2\u00da\u00d9\3\2\2\2\u00db\u00de\3\2\2\2\u00dc\u00da\3\2\2\2\u00dc"+
		"\u00dd\3\2\2\2\u00dd\u00df\3\2\2\2\u00de\u00dc\3\2\2\2\u00df\u00e0\7$"+
		"\2\2\u00e0D\3\2\2\2\24\2NT[hmsw}\u0098\u00a1\u00a7\u00ad\u00b2\u00bc\u00ca"+
		"\u00d2\u00dc\6\3\b\3\3\t\4\3\17\2\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}