// Generated from DecafParser.g4 by ANTLR 4.4

	import java.util.Map;
	import java.util.HashMap;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DecafParserLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__1=1, T__0=2, HEX_PRFEFIX=3, INT_LITERAL=4, BOOL_LITERAL=5, IDENTIIER=6, 
		BRACKET_OPEN=7, BRACKET_CLOSE=8, SQUARE_BRACKET_OPEN=9, SQUARE_BRACKET_CLOSE=10, 
		COMMA=11, SEMICOLON=12, PARENTHESIS_OPEN=13, PARENTHESIS_CLOSE=14, ASSIGN_OP=15, 
		ARITH_OP=16, RELOP=17, EQ_OP=18, COND_OP=19, WHITESPACE=20, BLOCK_COMMENT=21, 
		EOL_COMMENT=22;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'"
	};
	public static final String[] ruleNames = {
		"T__1", "T__0", "DECIMAL_LITERAL", "HEX_LITERAL", "HEX_PRFEFIX", "INT_LITERAL", 
		"BOOL_LITERAL", "ALPHA", "DIGIT", "ALPHA_NUM", "HEX_DIGIT", "ID", "IDENTIIER", 
		"BRACKET_OPEN", "BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", 
		"COMMA", "SEMICOLON", "PARENTHESIS_OPEN", "PARENTHESIS_CLOSE", "ASSIGN_OP", 
		"ARITH_OP", "RELOP", "EQ_OP", "COND_OP", "WHITESPACE", "BLOCK_COMMENT", 
		"EOL_COMMENT"
	};


		
		public static final int SHOULD_SHOW = 100;
		
		Map<String, Integer> keywords = new HashMap<String, Integer>(){{
			put("class", DecafParser.CLASS);
			put("Program", DecafParser.PROGRAM);
			put("if", DecafParser.IF);
			put("else", DecafParser.ELSE);
			put("for", DecafParser.FOR);
			put("return", DecafParser.RETURN);
			put("break", DecafParser.BREAK);
			put("continue", DecafParser.CONTINUE);
			put("callout", DecafParser.CALLOUT);
			put("boolean", DecafParser.BOOLEAN);
			put("true", DecafParser.TRUE);
			put("false", DecafParser.FALSE);
			put("int", DecafParser.INT);
			put("void", DecafParser.VOID);		
		}};


	public DecafParserLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "DecafParser.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 5: INT_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 6: BOOL_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 12: IDENTIIER_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void INT_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: _channel = SHOULD_SHOW; break;
		}
	}
	private void BOOL_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: _channel = SHOULD_SHOW; break;
		}
	}
	private void IDENTIIER_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  
			if(keywords.containsKey(getText())){
				setType(keywords.get(getText()));
			}
			else{
				_channel = SHOULD_SHOW;
			}
		 break;
		}
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\30\u00b7\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\3\2\3\2\3\3\3"+
		"\3\3\4\6\4C\n\4\r\4\16\4D\3\5\3\5\6\5I\n\5\r\5\16\5J\3\6\3\6\3\6\3\7\3"+
		"\7\5\7R\n\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b_\n\b\3\b\3"+
		"\b\3\t\5\td\n\t\3\n\3\n\3\13\3\13\5\13j\n\13\3\f\3\f\5\fn\n\f\3\r\3\r"+
		"\7\rr\n\r\f\r\16\ru\13\r\3\16\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21"+
		"\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30"+
		"\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\34\6\34\u0097\n\34\r\34\16"+
		"\34\u0098\3\34\3\34\3\35\3\35\3\35\3\35\7\35\u00a1\n\35\f\35\16\35\u00a4"+
		"\13\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\7\36\u00af\n\36\f"+
		"\36\16\36\u00b2\13\36\3\36\3\36\3\36\3\36\4\u00a2\u00b0\2\37\3\3\5\4\7"+
		"\2\t\2\13\5\r\6\17\7\21\2\23\2\25\2\27\2\31\2\33\b\35\t\37\n!\13#\f%\r"+
		"\'\16)\17+\20-\21/\22\61\23\63\24\65\25\67\269\27;\30\3\2\5\5\2C\\aac"+
		"|\4\2CHch\5\2\13\f\16\17\"\"\u00b9\2\3\3\2\2\2\2\5\3\2\2\2\2\13\3\2\2"+
		"\2\2\r\3\2\2\2\2\17\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!"+
		"\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3"+
		"\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2"+
		"\29\3\2\2\2\2;\3\2\2\2\3=\3\2\2\2\5?\3\2\2\2\7B\3\2\2\2\tF\3\2\2\2\13"+
		"L\3\2\2\2\rQ\3\2\2\2\17^\3\2\2\2\21c\3\2\2\2\23e\3\2\2\2\25i\3\2\2\2\27"+
		"m\3\2\2\2\31o\3\2\2\2\33v\3\2\2\2\35y\3\2\2\2\37{\3\2\2\2!}\3\2\2\2#\177"+
		"\3\2\2\2%\u0081\3\2\2\2\'\u0083\3\2\2\2)\u0085\3\2\2\2+\u0087\3\2\2\2"+
		"-\u0089\3\2\2\2/\u008b\3\2\2\2\61\u008d\3\2\2\2\63\u008f\3\2\2\2\65\u0092"+
		"\3\2\2\2\67\u0096\3\2\2\29\u009c\3\2\2\2;\u00aa\3\2\2\2=>\7/\2\2>\4\3"+
		"\2\2\2?@\7#\2\2@\6\3\2\2\2AC\5\23\n\2BA\3\2\2\2CD\3\2\2\2DB\3\2\2\2DE"+
		"\3\2\2\2E\b\3\2\2\2FH\5\13\6\2GI\5\27\f\2HG\3\2\2\2IJ\3\2\2\2JH\3\2\2"+
		"\2JK\3\2\2\2K\n\3\2\2\2LM\7\62\2\2MN\7z\2\2N\f\3\2\2\2OR\5\7\4\2PR\5\t"+
		"\5\2QO\3\2\2\2QP\3\2\2\2RS\3\2\2\2ST\b\7\2\2T\16\3\2\2\2UV\7v\2\2VW\7"+
		"t\2\2WX\7w\2\2X_\7g\2\2YZ\7h\2\2Z[\7c\2\2[\\\7n\2\2\\]\7u\2\2]_\7g\2\2"+
		"^U\3\2\2\2^Y\3\2\2\2_`\3\2\2\2`a\b\b\3\2a\20\3\2\2\2bd\t\2\2\2cb\3\2\2"+
		"\2d\22\3\2\2\2ef\4\62;\2f\24\3\2\2\2gj\5\21\t\2hj\5\23\n\2ig\3\2\2\2i"+
		"h\3\2\2\2j\26\3\2\2\2kn\5\23\n\2ln\t\3\2\2mk\3\2\2\2ml\3\2\2\2n\30\3\2"+
		"\2\2os\5\21\t\2pr\5\25\13\2qp\3\2\2\2ru\3\2\2\2sq\3\2\2\2st\3\2\2\2t\32"+
		"\3\2\2\2us\3\2\2\2vw\5\31\r\2wx\b\16\4\2x\34\3\2\2\2yz\7}\2\2z\36\3\2"+
		"\2\2{|\7\177\2\2| \3\2\2\2}~\7]\2\2~\"\3\2\2\2\177\u0080\7_\2\2\u0080"+
		"$\3\2\2\2\u0081\u0082\7.\2\2\u0082&\3\2\2\2\u0083\u0084\7=\2\2\u0084("+
		"\3\2\2\2\u0085\u0086\7*\2\2\u0086*\3\2\2\2\u0087\u0088\7+\2\2\u0088,\3"+
		"\2\2\2\u0089\u008a\7?\2\2\u008a.\3\2\2\2\u008b\u008c\7-\2\2\u008c\60\3"+
		"\2\2\2\u008d\u008e\7>\2\2\u008e\62\3\2\2\2\u008f\u0090\7?\2\2\u0090\u0091"+
		"\7?\2\2\u0091\64\3\2\2\2\u0092\u0093\7(\2\2\u0093\u0094\7(\2\2\u0094\66"+
		"\3\2\2\2\u0095\u0097\t\4\2\2\u0096\u0095\3\2\2\2\u0097\u0098\3\2\2\2\u0098"+
		"\u0096\3\2\2\2\u0098\u0099\3\2\2\2\u0099\u009a\3\2\2\2\u009a\u009b\b\34"+
		"\5\2\u009b8\3\2\2\2\u009c\u009d\7\61\2\2\u009d\u009e\7,\2\2\u009e\u00a2"+
		"\3\2\2\2\u009f\u00a1\13\2\2\2\u00a0\u009f\3\2\2\2\u00a1\u00a4\3\2\2\2"+
		"\u00a2\u00a3\3\2\2\2\u00a2\u00a0\3\2\2\2\u00a3\u00a5\3\2\2\2\u00a4\u00a2"+
		"\3\2\2\2\u00a5\u00a6\7,\2\2\u00a6\u00a7\7\61\2\2\u00a7\u00a8\3\2\2\2\u00a8"+
		"\u00a9\b\35\5\2\u00a9:\3\2\2\2\u00aa\u00ab\7\61\2\2\u00ab\u00ac\7\61\2"+
		"\2\u00ac\u00b0\3\2\2\2\u00ad\u00af\13\2\2\2\u00ae\u00ad\3\2\2\2\u00af"+
		"\u00b2\3\2\2\2\u00b0\u00b1\3\2\2\2\u00b0\u00ae\3\2\2\2\u00b1\u00b3\3\2"+
		"\2\2\u00b2\u00b0\3\2\2\2\u00b3\u00b4\7\f\2\2\u00b4\u00b5\3\2\2\2\u00b5"+
		"\u00b6\b\36\5\2\u00b6<\3\2\2\2\16\2DJQ^cims\u0098\u00a2\u00b0\6\3\7\3"+
		"\3\b\4\3\16\2\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}