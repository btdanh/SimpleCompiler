// Generated from StringLexer.g4 by ANTLR 4.4
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class StringLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ASSIGN_OP=1, ARITH_OP=2, RELOP=3, EQ_OP=4, COND_OP=5, BRACKET_OPEN=6, 
		BRACKET_CLOSE=7, SQUARE_BRACKET_OPEN=8, SQUARE_BRACKET_CLOSE=9, COMMA=10, 
		SEMICOLON=11, PARENTHESIS_OPEN=12, PARENTHESIS_CLOSE=13, WHITESPACE=14, 
		BLOCK_COMMENT=15, EOL_COMMENT=16, CHAR_LITERAL=17, STRING_LITERAL=18, 
		LSINGLE_QUOTE=19, LDOUBLE_QUOTE=20;
	public static final int CHAR_MODE = 1;
	public static final int STRING_MODE = 2;
	public static String[] modeNames = {
		"DEFAULT_MODE", "CHAR_MODE", "STRING_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'"
	};
	public static final String[] ruleNames = {
		"ASSIGN_OP", "ARITH_OP", "RELOP", "EQ_OP", "COND_OP", "BRACKET_OPEN", 
		"BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", "COMMA", 
		"SEMICOLON", "PARENTHESIS_OPEN", "PARENTHESIS_CLOSE", "WHITESPACE", "BLOCK_COMMENT", 
		"EOL_COMMENT", "CHAR", "LSINGLE_QUOTE", "LDOUBLE_QUOTE", "CHAR_LITERAL", 
		"CHAR_TEXT", "STRING_LITERAL", "STRING_TEXT"
	};


	public StringLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "StringLexer.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\26\u00a0\b\1\b\1"+
		"\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4"+
		"\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t"+
		"\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t"+
		"\30\3\2\3\2\3\2\3\2\3\2\5\29\n\2\3\3\3\3\3\4\3\4\3\4\3\4\3\4\5\4B\n\4"+
		"\3\5\3\5\3\5\3\5\5\5H\n\5\3\6\3\6\3\6\3\6\5\6N\n\6\3\7\3\7\3\b\3\b\3\t"+
		"\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\6\17a\n\17\r\17"+
		"\16\17b\3\17\3\17\3\20\3\20\3\20\3\20\7\20k\n\20\f\20\16\20n\13\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\7\21y\n\21\f\21\16\21|\13\21"+
		"\3\21\3\21\3\21\3\21\3\22\5\22\u0083\n\22\3\23\3\23\3\23\3\23\3\23\3\24"+
		"\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\27"+
		"\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\4lz\2\31\5\3\7\4\t\5\13\6\r\7"+
		"\17\b\21\t\23\n\25\13\27\f\31\r\33\16\35\17\37\20!\21#\22%\2\'\25)\26"+
		"+\23-\2/\24\61\2\5\2\3\4\6\6\2\'\',-//\61\61\4\2>>@@\5\2\13\f\16\17\""+
		"\"\4\2\13\f\"\u0080\u00a5\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2"+
		"\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2"+
		"\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2"+
		"\2\2\2#\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\3+\3\2\2\2\3-\3\2\2\2\4/\3\2\2"+
		"\2\4\61\3\2\2\2\58\3\2\2\2\7:\3\2\2\2\tA\3\2\2\2\13G\3\2\2\2\rM\3\2\2"+
		"\2\17O\3\2\2\2\21Q\3\2\2\2\23S\3\2\2\2\25U\3\2\2\2\27W\3\2\2\2\31Y\3\2"+
		"\2\2\33[\3\2\2\2\35]\3\2\2\2\37`\3\2\2\2!f\3\2\2\2#t\3\2\2\2%\u0082\3"+
		"\2\2\2\'\u0084\3\2\2\2)\u0089\3\2\2\2+\u008e\3\2\2\2-\u0093\3\2\2\2/\u0097"+
		"\3\2\2\2\61\u009c\3\2\2\2\639\7?\2\2\64\65\7-\2\2\659\7?\2\2\66\67\7/"+
		"\2\2\679\7?\2\28\63\3\2\2\28\64\3\2\2\28\66\3\2\2\29\6\3\2\2\2:;\t\2\2"+
		"\2;\b\3\2\2\2<B\t\3\2\2=>\7>\2\2>B\7?\2\2?@\7@\2\2@B\7?\2\2A<\3\2\2\2"+
		"A=\3\2\2\2A?\3\2\2\2B\n\3\2\2\2CD\7?\2\2DH\7?\2\2EF\7#\2\2FH\7?\2\2GC"+
		"\3\2\2\2GE\3\2\2\2H\f\3\2\2\2IJ\7(\2\2JN\7(\2\2KL\7~\2\2LN\7~\2\2MI\3"+
		"\2\2\2MK\3\2\2\2N\16\3\2\2\2OP\7}\2\2P\20\3\2\2\2QR\7\177\2\2R\22\3\2"+
		"\2\2ST\7]\2\2T\24\3\2\2\2UV\7_\2\2V\26\3\2\2\2WX\7.\2\2X\30\3\2\2\2YZ"+
		"\7=\2\2Z\32\3\2\2\2[\\\7*\2\2\\\34\3\2\2\2]^\7+\2\2^\36\3\2\2\2_a\t\4"+
		"\2\2`_\3\2\2\2ab\3\2\2\2b`\3\2\2\2bc\3\2\2\2cd\3\2\2\2de\b\17\2\2e \3"+
		"\2\2\2fg\7\61\2\2gh\7,\2\2hl\3\2\2\2ik\13\2\2\2ji\3\2\2\2kn\3\2\2\2lm"+
		"\3\2\2\2lj\3\2\2\2mo\3\2\2\2nl\3\2\2\2op\7,\2\2pq\7\61\2\2qr\3\2\2\2r"+
		"s\b\20\2\2s\"\3\2\2\2tu\7\61\2\2uv\7\61\2\2vz\3\2\2\2wy\13\2\2\2xw\3\2"+
		"\2\2y|\3\2\2\2z{\3\2\2\2zx\3\2\2\2{}\3\2\2\2|z\3\2\2\2}~\7\f\2\2~\177"+
		"\3\2\2\2\177\u0080\b\21\2\2\u0080$\3\2\2\2\u0081\u0083\t\5\2\2\u0082\u0081"+
		"\3\2\2\2\u0083&\3\2\2\2\u0084\u0085\7)\2\2\u0085\u0086\3\2\2\2\u0086\u0087"+
		"\b\23\3\2\u0087\u0088\b\23\4\2\u0088(\3\2\2\2\u0089\u008a\7$\2\2\u008a"+
		"\u008b\3\2\2\2\u008b\u008c\b\24\3\2\u008c\u008d\b\24\5\2\u008d*\3\2\2"+
		"\2\u008e\u008f\7)\2\2\u008f\u0090\3\2\2\2\u0090\u0091\b\25\6\2\u0091\u0092"+
		"\b\25\7\2\u0092,\3\2\2\2\u0093\u0094\5%\22\2\u0094\u0095\3\2\2\2\u0095"+
		"\u0096\b\26\3\2\u0096.\3\2\2\2\u0097\u0098\7$\2\2\u0098\u0099\3\2\2\2"+
		"\u0099\u009a\b\27\6\2\u009a\u009b\b\27\7\2\u009b\60\3\2\2\2\u009c\u009d"+
		"\5%\22\2\u009d\u009e\3\2\2\2\u009e\u009f\b\30\3\2\u009f\62\3\2\2\2\r\2"+
		"\3\48AGMblz\u0082\b\b\2\2\5\2\2\4\3\2\4\4\2\4\2\2\2f\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}