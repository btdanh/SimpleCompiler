// Generated from DecafLexer.g4 by ANTLR 4.4

	import java.util.Map;
	import java.util.HashMap;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DecafLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		EOL_COMMENT=16, ASSIGN_OP=1, STRING_LITERAL=18, EQ_OP=4, CHAR_LITERAL=17, 
		COMMA=10, ARITH_OP=2, LDOUBLE_QUOTE=20, BLOCK_COMMENT=15, WHITESPACE=14, 
		LSINGLE_QUOTE=19, SEMICOLON=11, SQUARE_BRACKET_CLOSE=9, COND_OP=5, PARENTHESIS_CLOSE=13, 
		PARENTHESIS_OPEN=12, RELOP=3, BRACKET_CLOSE=7, SQUARE_BRACKET_OPEN=8, 
		BRACKET_OPEN=6, CLASS=21, PROGRAM=22, IF=23, ELSE=24, FOR=25, RETURN=26, 
		BREAK=27, CONTINUE=28, CALLOUT=29, BOOLEAN=30, TRUE=31, FALSE=32, INT=33, 
		VOID=34, HEX_PRFEFIX=35, INT_LITERAL=36, BOOL_LITERAL=37, IDENTIIER=38;
	public static final int CHAR_MODE = 1;
	public static final int STRING_MODE = 2;
	public static String[] modeNames = {
		"DEFAULT_MODE", "CHAR_MODE", "STRING_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'"
	};
	public static final String[] ruleNames = {
		"DECIMAL_LITERAL", "HEX_LITERAL", "HEX_PRFEFIX", "INT_LITERAL", "BOOL_LITERAL", 
		"ALPHA", "DIGIT", "ALPHA_NUM", "HEX_DIGIT", "ID", "IDENTIIER", "ASSIGN_OP", 
		"ARITH_OP", "RELOP", "EQ_OP", "COND_OP", "BRACKET_OPEN", "BRACKET_CLOSE", 
		"SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", "COMMA", "SEMICOLON", "PARENTHESIS_OPEN", 
		"PARENTHESIS_CLOSE", "WHITESPACE", "BLOCK_COMMENT", "EOL_COMMENT", "CHAR", 
		"LSINGLE_QUOTE", "LDOUBLE_QUOTE", "CHAR_LITERAL", "CHAR_TEXT", "STRING_LITERAL", 
		"STRING_TEXT"
	};


		
		public static final int SHOULD_SHOW = 100;
		
		Map<String, Integer> keywords = new HashMap<String, Integer>(){{
			put("class", DecafParser.CLASS);
			put("Program", DecafParser.PROGRAM);
			put("if", DecafParser.IF);
			put("else", DecafParser.ELSE);
			put("for", DecafParser.FOR);
			put("return", DecafParser.RETURN);
			put("break", DecafParser.BREAK);
			put("continue", DecafParser.CONTINUE);
			put("callout", DecafParser.CALLOUT);
			put("boolean", DecafParser.BOOLEAN);
			put("true", DecafParser.TRUE);
			put("false", DecafParser.FALSE);
			put("int", DecafParser.INT);
			put("void", DecafParser.VOID);		
		}};


	public DecafLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "DecafLexer.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 3: INT_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 4: BOOL_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 10: IDENTIIER_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void INT_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: _channel = SHOULD_SHOW; break;
		}
	}
	private void BOOL_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: _channel = SHOULD_SHOW; break;
		}
	}
	private void IDENTIIER_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  
			if(keywords.containsKey(getText())){
				setType(keywords.get(getText()));
			}
			else{
				_channel = SHOULD_SHOW;
			}
		 break;
		}
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2(\u00ee\b\1\b\1\b"+
		"\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n"+
		"\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21"+
		"\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30"+
		"\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37"+
		"\4 \t \4!\t!\4\"\t\"\4#\t#\3\2\6\2K\n\2\r\2\16\2L\3\3\3\3\6\3Q\n\3\r\3"+
		"\16\3R\3\4\3\4\3\4\3\5\3\5\5\5Z\n\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\5\6g\n\6\3\6\3\6\3\7\5\7l\n\7\3\b\3\b\3\t\3\t\5\tr\n\t\3\n"+
		"\3\n\5\nv\n\n\3\13\3\13\7\13z\n\13\f\13\16\13}\13\13\3\f\3\f\3\f\3\r\3"+
		"\r\3\r\3\r\3\r\5\r\u0087\n\r\3\16\3\16\3\17\3\17\3\17\3\17\3\17\5\17\u0090"+
		"\n\17\3\20\3\20\3\20\3\20\5\20\u0096\n\20\3\21\3\21\3\21\3\21\5\21\u009c"+
		"\n\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30"+
		"\3\30\3\31\3\31\3\32\6\32\u00af\n\32\r\32\16\32\u00b0\3\32\3\32\3\33\3"+
		"\33\3\33\3\33\7\33\u00b9\n\33\f\33\16\33\u00bc\13\33\3\33\3\33\3\33\3"+
		"\33\3\33\3\34\3\34\3\34\3\34\7\34\u00c7\n\34\f\34\16\34\u00ca\13\34\3"+
		"\34\3\34\3\34\3\34\3\35\5\35\u00d1\n\35\3\36\3\36\3\36\3\36\3\36\3\37"+
		"\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3"+
		"#\3#\3#\3#\4\u00ba\u00c8\2$\5\2\7\2\t%\13&\r\'\17\2\21\2\23\2\25\2\27"+
		"\2\31(\33\3\35\4\37\5!\6#\7%\b\'\t)\n+\13-\f/\r\61\16\63\17\65\20\67\21"+
		"9\22;\2=\25?\26A\23C\2E\24G\2\5\2\3\4\b\5\2C\\aac|\4\2CHch\6\2\'\',-/"+
		"/\61\61\4\2>>@@\5\2\13\f\16\17\"\"\4\2\13\f\"\u0080\u00f3\2\t\3\2\2\2"+
		"\2\13\3\2\2\2\2\r\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37"+
		"\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3"+
		"\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2"+
		"\67\3\2\2\2\29\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\3A\3\2\2\2\3C\3\2\2\2\4E"+
		"\3\2\2\2\4G\3\2\2\2\5J\3\2\2\2\7N\3\2\2\2\tT\3\2\2\2\13Y\3\2\2\2\rf\3"+
		"\2\2\2\17k\3\2\2\2\21m\3\2\2\2\23q\3\2\2\2\25u\3\2\2\2\27w\3\2\2\2\31"+
		"~\3\2\2\2\33\u0086\3\2\2\2\35\u0088\3\2\2\2\37\u008f\3\2\2\2!\u0095\3"+
		"\2\2\2#\u009b\3\2\2\2%\u009d\3\2\2\2\'\u009f\3\2\2\2)\u00a1\3\2\2\2+\u00a3"+
		"\3\2\2\2-\u00a5\3\2\2\2/\u00a7\3\2\2\2\61\u00a9\3\2\2\2\63\u00ab\3\2\2"+
		"\2\65\u00ae\3\2\2\2\67\u00b4\3\2\2\29\u00c2\3\2\2\2;\u00d0\3\2\2\2=\u00d2"+
		"\3\2\2\2?\u00d7\3\2\2\2A\u00dc\3\2\2\2C\u00e1\3\2\2\2E\u00e5\3\2\2\2G"+
		"\u00ea\3\2\2\2IK\5\21\b\2JI\3\2\2\2KL\3\2\2\2LJ\3\2\2\2LM\3\2\2\2M\6\3"+
		"\2\2\2NP\5\t\4\2OQ\5\25\n\2PO\3\2\2\2QR\3\2\2\2RP\3\2\2\2RS\3\2\2\2S\b"+
		"\3\2\2\2TU\7\62\2\2UV\7z\2\2V\n\3\2\2\2WZ\5\5\2\2XZ\5\7\3\2YW\3\2\2\2"+
		"YX\3\2\2\2Z[\3\2\2\2[\\\b\5\2\2\\\f\3\2\2\2]^\7v\2\2^_\7t\2\2_`\7w\2\2"+
		"`g\7g\2\2ab\7h\2\2bc\7c\2\2cd\7n\2\2de\7u\2\2eg\7g\2\2f]\3\2\2\2fa\3\2"+
		"\2\2gh\3\2\2\2hi\b\6\3\2i\16\3\2\2\2jl\t\2\2\2kj\3\2\2\2l\20\3\2\2\2m"+
		"n\4\62;\2n\22\3\2\2\2or\5\17\7\2pr\5\21\b\2qo\3\2\2\2qp\3\2\2\2r\24\3"+
		"\2\2\2sv\5\21\b\2tv\t\3\2\2us\3\2\2\2ut\3\2\2\2v\26\3\2\2\2w{\5\17\7\2"+
		"xz\5\23\t\2yx\3\2\2\2z}\3\2\2\2{y\3\2\2\2{|\3\2\2\2|\30\3\2\2\2}{\3\2"+
		"\2\2~\177\5\27\13\2\177\u0080\b\f\4\2\u0080\32\3\2\2\2\u0081\u0087\7?"+
		"\2\2\u0082\u0083\7-\2\2\u0083\u0087\7?\2\2\u0084\u0085\7/\2\2\u0085\u0087"+
		"\7?\2\2\u0086\u0081\3\2\2\2\u0086\u0082\3\2\2\2\u0086\u0084\3\2\2\2\u0087"+
		"\34\3\2\2\2\u0088\u0089\t\4\2\2\u0089\36\3\2\2\2\u008a\u0090\t\5\2\2\u008b"+
		"\u008c\7>\2\2\u008c\u0090\7?\2\2\u008d\u008e\7@\2\2\u008e\u0090\7?\2\2"+
		"\u008f\u008a\3\2\2\2\u008f\u008b\3\2\2\2\u008f\u008d\3\2\2\2\u0090 \3"+
		"\2\2\2\u0091\u0092\7?\2\2\u0092\u0096\7?\2\2\u0093\u0094\7#\2\2\u0094"+
		"\u0096\7?\2\2\u0095\u0091\3\2\2\2\u0095\u0093\3\2\2\2\u0096\"\3\2\2\2"+
		"\u0097\u0098\7(\2\2\u0098\u009c\7(\2\2\u0099\u009a\7~\2\2\u009a\u009c"+
		"\7~\2\2\u009b\u0097\3\2\2\2\u009b\u0099\3\2\2\2\u009c$\3\2\2\2\u009d\u009e"+
		"\7}\2\2\u009e&\3\2\2\2\u009f\u00a0\7\177\2\2\u00a0(\3\2\2\2\u00a1\u00a2"+
		"\7]\2\2\u00a2*\3\2\2\2\u00a3\u00a4\7_\2\2\u00a4,\3\2\2\2\u00a5\u00a6\7"+
		".\2\2\u00a6.\3\2\2\2\u00a7\u00a8\7=\2\2\u00a8\60\3\2\2\2\u00a9\u00aa\7"+
		"*\2\2\u00aa\62\3\2\2\2\u00ab\u00ac\7+\2\2\u00ac\64\3\2\2\2\u00ad\u00af"+
		"\t\6\2\2\u00ae\u00ad\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00ae\3\2\2\2\u00b0"+
		"\u00b1\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00b3\b\32\5\2\u00b3\66\3\2\2"+
		"\2\u00b4\u00b5\7\61\2\2\u00b5\u00b6\7,\2\2\u00b6\u00ba\3\2\2\2\u00b7\u00b9"+
		"\13\2\2\2\u00b8\u00b7\3\2\2\2\u00b9\u00bc\3\2\2\2\u00ba\u00bb\3\2\2\2"+
		"\u00ba\u00b8\3\2\2\2\u00bb\u00bd\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bd\u00be"+
		"\7,\2\2\u00be\u00bf\7\61\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00c1\b\33\5\2"+
		"\u00c18\3\2\2\2\u00c2\u00c3\7\61\2\2\u00c3\u00c4\7\61\2\2\u00c4\u00c8"+
		"\3\2\2\2\u00c5\u00c7\13\2\2\2\u00c6\u00c5\3\2\2\2\u00c7\u00ca\3\2\2\2"+
		"\u00c8\u00c9\3\2\2\2\u00c8\u00c6\3\2\2\2\u00c9\u00cb\3\2\2\2\u00ca\u00c8"+
		"\3\2\2\2\u00cb\u00cc\7\f\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00ce\b\34\5\2"+
		"\u00ce:\3\2\2\2\u00cf\u00d1\t\7\2\2\u00d0\u00cf\3\2\2\2\u00d1<\3\2\2\2"+
		"\u00d2\u00d3\7)\2\2\u00d3\u00d4\3\2\2\2\u00d4\u00d5\b\36\6\2\u00d5\u00d6"+
		"\b\36\7\2\u00d6>\3\2\2\2\u00d7\u00d8\7$\2\2\u00d8\u00d9\3\2\2\2\u00d9"+
		"\u00da\b\37\6\2\u00da\u00db\b\37\b\2\u00db@\3\2\2\2\u00dc\u00dd\7)\2\2"+
		"\u00dd\u00de\3\2\2\2\u00de\u00df\b \t\2\u00df\u00e0\b \n\2\u00e0B\3\2"+
		"\2\2\u00e1\u00e2\5;\35\2\u00e2\u00e3\3\2\2\2\u00e3\u00e4\b!\6\2\u00e4"+
		"D\3\2\2\2\u00e5\u00e6\7$\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e8\b\"\t\2\u00e8"+
		"\u00e9\b\"\n\2\u00e9F\3\2\2\2\u00ea\u00eb\5;\35\2\u00eb\u00ec\3\2\2\2"+
		"\u00ec\u00ed\b#\6\2\u00edH\3\2\2\2\25\2\3\4LRYfkqu{\u0086\u008f\u0095"+
		"\u009b\u00b0\u00ba\u00c8\u00d0\13\3\5\3\3\6\4\3\f\2\b\2\2\5\2\2\4\3\2"+
		"\4\4\2\4\2\2\2f\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}