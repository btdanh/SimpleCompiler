// Generated from DecafLexer.g4 by ANTLR 4.4

	import java.util.Map;
	import java.util.HashMap;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DecafLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		LSINGLE_QUOTE=3, STRING_LITERAL=2, CHAR_LITERAL=1, LDOUBLE_QUOTE=4, CLASS=5, 
		PROGRAM=6, IF=7, ELSE=8, FOR=9, RETURN=10, BREAK=11, CONTINUE=12, CALLOUT=13, 
		BOOLEAN=14, TRUE=15, FALSE=16, INT=17, VOID=18, HEX_PRFEFIX=19, INT_LITERAL=20, 
		BOOL_LITERAL=21, IDENTIIER=22, BRACKET_OPEN=23, BRACKET_CLOSE=24, SQUARE_BRACKET_OPEN=25, 
		SQUARE_BRACKET_CLOSE=26, COMMA=27, SEMICOLON=28, PARENTHESIS_OPEN=29, 
		PARENTHESIS_CLOSE=30, ASSIGN_OP=31, ARITH_OP=32, RELOP=33, EQ_OP=34, COND_OP=35, 
		WHITESPACE=36, BLOCK_COMMENT=37, EOL_COMMENT=38;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'"
	};
	public static final String[] ruleNames = {
		"DECIMAL_LITERAL", "HEX_LITERAL", "HEX_PRFEFIX", "INT_LITERAL", "BOOL_LITERAL", 
		"ALPHA", "DIGIT", "ALPHA_NUM", "HEX_DIGIT", "ID", "IDENTIIER", "BRACKET_OPEN", 
		"BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", "COMMA", 
		"SEMICOLON", "PARENTHESIS_OPEN", "PARENTHESIS_CLOSE", "ASSIGN_OP", "ARITH_OP", 
		"RELOP", "EQ_OP", "COND_OP", "WHITESPACE", "BLOCK_COMMENT", "EOL_COMMENT"
	};


		
		public static final int SHOULD_SHOW = 100;
		
		Map<String, Integer> keywords = new HashMap<String, Integer>(){{
			put("class", DecafParser.CLASS);
			put("Program", DecafParser.PROGRAM);
			put("if", DecafParser.IF);
			put("else", DecafParser.ELSE);
			put("for", DecafParser.FOR);
			put("return", DecafParser.RETURN);
			put("break", DecafParser.BREAK);
			put("continue", DecafParser.CONTINUE);
			put("callout", DecafParser.CALLOUT);
			put("boolean", DecafParser.BOOLEAN);
			put("true", DecafParser.TRUE);
			put("false", DecafParser.FALSE);
			put("int", DecafParser.INT);
			put("void", DecafParser.VOID);		
		}};


	public DecafLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "DecafLexer.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 3: INT_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 4: BOOL_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 10: IDENTIIER_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void INT_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: _channel = SHOULD_SHOW; break;
		}
	}
	private void BOOL_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: _channel = SHOULD_SHOW; break;
		}
	}
	private void IDENTIIER_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  
			if(keywords.containsKey(getText())){
				setType(keywords.get(getText()));
			}
			else{
				_channel = SHOULD_SHOW;
			}
		 break;
		}
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2(\u00af\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\3\2\6\2;\n\2\r\2\16\2<\3\3\3\3\6\3A\n\3"+
		"\r\3\16\3B\3\4\3\4\3\4\3\5\3\5\5\5J\n\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\5\6W\n\6\3\6\3\6\3\7\5\7\\\n\7\3\b\3\b\3\t\3\t\5\tb\n\t"+
		"\3\n\3\n\5\nf\n\n\3\13\3\13\7\13j\n\13\f\13\16\13m\13\13\3\f\3\f\3\f\3"+
		"\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24"+
		"\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\32"+
		"\6\32\u008f\n\32\r\32\16\32\u0090\3\32\3\32\3\33\3\33\3\33\3\33\7\33\u0099"+
		"\n\33\f\33\16\33\u009c\13\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3"+
		"\34\7\34\u00a7\n\34\f\34\16\34\u00aa\13\34\3\34\3\34\3\34\3\34\4\u009a"+
		"\u00a8\2\35\3\2\5\2\7\25\t\26\13\27\r\2\17\2\21\2\23\2\25\2\27\30\31\31"+
		"\33\32\35\33\37\34!\35#\36%\37\' )!+\"-#/$\61%\63&\65\'\67(\3\2\5\5\2"+
		"C\\aac|\4\2CHch\5\2\13\f\16\17\"\"\u00b1\2\7\3\2\2\2\2\t\3\2\2\2\2\13"+
		"\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2"+
		"\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2"+
		"\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3"+
		"\2\2\2\3:\3\2\2\2\5>\3\2\2\2\7D\3\2\2\2\tI\3\2\2\2\13V\3\2\2\2\r[\3\2"+
		"\2\2\17]\3\2\2\2\21a\3\2\2\2\23e\3\2\2\2\25g\3\2\2\2\27n\3\2\2\2\31q\3"+
		"\2\2\2\33s\3\2\2\2\35u\3\2\2\2\37w\3\2\2\2!y\3\2\2\2#{\3\2\2\2%}\3\2\2"+
		"\2\'\177\3\2\2\2)\u0081\3\2\2\2+\u0083\3\2\2\2-\u0085\3\2\2\2/\u0087\3"+
		"\2\2\2\61\u008a\3\2\2\2\63\u008e\3\2\2\2\65\u0094\3\2\2\2\67\u00a2\3\2"+
		"\2\29;\5\17\b\2:9\3\2\2\2;<\3\2\2\2<:\3\2\2\2<=\3\2\2\2=\4\3\2\2\2>@\5"+
		"\7\4\2?A\5\23\n\2@?\3\2\2\2AB\3\2\2\2B@\3\2\2\2BC\3\2\2\2C\6\3\2\2\2D"+
		"E\7\62\2\2EF\7z\2\2F\b\3\2\2\2GJ\5\3\2\2HJ\5\5\3\2IG\3\2\2\2IH\3\2\2\2"+
		"JK\3\2\2\2KL\b\5\2\2L\n\3\2\2\2MN\7v\2\2NO\7t\2\2OP\7w\2\2PW\7g\2\2QR"+
		"\7h\2\2RS\7c\2\2ST\7n\2\2TU\7u\2\2UW\7g\2\2VM\3\2\2\2VQ\3\2\2\2WX\3\2"+
		"\2\2XY\b\6\3\2Y\f\3\2\2\2Z\\\t\2\2\2[Z\3\2\2\2\\\16\3\2\2\2]^\4\62;\2"+
		"^\20\3\2\2\2_b\5\r\7\2`b\5\17\b\2a_\3\2\2\2a`\3\2\2\2b\22\3\2\2\2cf\5"+
		"\17\b\2df\t\3\2\2ec\3\2\2\2ed\3\2\2\2f\24\3\2\2\2gk\5\r\7\2hj\5\21\t\2"+
		"ih\3\2\2\2jm\3\2\2\2ki\3\2\2\2kl\3\2\2\2l\26\3\2\2\2mk\3\2\2\2no\5\25"+
		"\13\2op\b\f\4\2p\30\3\2\2\2qr\7}\2\2r\32\3\2\2\2st\7\177\2\2t\34\3\2\2"+
		"\2uv\7]\2\2v\36\3\2\2\2wx\7_\2\2x \3\2\2\2yz\7.\2\2z\"\3\2\2\2{|\7=\2"+
		"\2|$\3\2\2\2}~\7*\2\2~&\3\2\2\2\177\u0080\7+\2\2\u0080(\3\2\2\2\u0081"+
		"\u0082\7?\2\2\u0082*\3\2\2\2\u0083\u0084\7-\2\2\u0084,\3\2\2\2\u0085\u0086"+
		"\7>\2\2\u0086.\3\2\2\2\u0087\u0088\7?\2\2\u0088\u0089\7?\2\2\u0089\60"+
		"\3\2\2\2\u008a\u008b\7(\2\2\u008b\u008c\7(\2\2\u008c\62\3\2\2\2\u008d"+
		"\u008f\t\4\2\2\u008e\u008d\3\2\2\2\u008f\u0090\3\2\2\2\u0090\u008e\3\2"+
		"\2\2\u0090\u0091\3\2\2\2\u0091\u0092\3\2\2\2\u0092\u0093\b\32\5\2\u0093"+
		"\64\3\2\2\2\u0094\u0095\7\61\2\2\u0095\u0096\7,\2\2\u0096\u009a\3\2\2"+
		"\2\u0097\u0099\13\2\2\2\u0098\u0097\3\2\2\2\u0099\u009c\3\2\2\2\u009a"+
		"\u009b\3\2\2\2\u009a\u0098\3\2\2\2\u009b\u009d\3\2\2\2\u009c\u009a\3\2"+
		"\2\2\u009d\u009e\7,\2\2\u009e\u009f\7\61\2\2\u009f\u00a0\3\2\2\2\u00a0"+
		"\u00a1\b\33\5\2\u00a1\66\3\2\2\2\u00a2\u00a3\7\61\2\2\u00a3\u00a4\7\61"+
		"\2\2\u00a4\u00a8\3\2\2\2\u00a5\u00a7\13\2\2\2\u00a6\u00a5\3\2\2\2\u00a7"+
		"\u00aa\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a8\u00a6\3\2\2\2\u00a9\u00ab\3\2"+
		"\2\2\u00aa\u00a8\3\2\2\2\u00ab\u00ac\7\f\2\2\u00ac\u00ad\3\2\2\2\u00ad"+
		"\u00ae\b\34\5\2\u00ae8\3\2\2\2\16\2<BIV[aek\u0090\u009a\u00a8\6\3\5\3"+
		"\3\6\4\3\f\2\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}