// Generated from DecafLexer.g4 by ANTLR 4.4

	import java.util.Map;
	import java.util.HashMap;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DecafLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		CLASS=1, PROGRAM=2, IF=3, ELSE=4, FOR=5, RETURN=6, BREAK=7, CONTINUE=8, 
		CALLOUT=9, BOOLEAN=10, TRUE=11, FALSE=12, INT=13, VOID=14, HEX_PRFEFIX=15, 
		INT_LITERAL=16, BOOL_LITERAL=17, START_ID=18, IDENTIIER=19, ASSIGN_OP=20, 
		ARITH_OP=21, RELOP=22, EQ_OP=23, COND_OP=24, NEGATIVE=25, ASSIGNMENT=26, 
		MINUS=27, BRACKET_OPEN=28, BRACKET_CLOSE=29, SQUARE_BRACKET_OPEN=30, SQUARE_BRACKET_CLOSE=31, 
		COMMA=32, SEMICOLON=33, PARENTHESIS_OPEN=34, PARENTHESIS_CLOSE=35, WHITESPACE=36, 
		BLOCK_COMMENT=37, EOL_COMMENT=38, CHAR_LITERAL=39, STRING_LITERAL=40, 
		ID=41, LSINGLE_QUOTE=42, LDOUBLE_QUOTE=43;
	public static final int CHAR_MODE = 1;
	public static final int CHAR_RETURN_MODE = 2;
	public static final int STRING_MODE = 3;
	public static final int ID_MODE = 4;
	public static String[] modeNames = {
		"DEFAULT_MODE", "CHAR_MODE", "CHAR_RETURN_MODE", "STRING_MODE", "ID_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'"
	};
	public static final String[] ruleNames = {
		"DECIMAL_LITERAL", "HEX_LITERAL", "HEX_PRFEFIX", "INT_LITERAL", "BOOL_LITERAL", 
		"ALPHA", "DIGIT", "ALPHA_NUM", "HEX_DIGIT", "START_ID", "IDENTIIER", "ASSIGN_OP", 
		"ARITH_OP", "RELOP", "EQ_OP", "COND_OP", "NEGATIVE", "ASSIGNMENT", "MINUS", 
		"BRACKET_OPEN", "BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", 
		"COMMA", "SEMICOLON", "PARENTHESIS_OPEN", "PARENTHESIS_CLOSE", "WHITESPACE", 
		"BLOCK_COMMENT", "EOL_COMMENT", "CHAR", "SPECIAL_CHAR", "LSINGLE_QUOTE", 
		"LDOUBLE_QUOTE", "CHAR_TEXT", "CHAR_LITERAL", "STRING_LITERAL", "STRING_TEXT", 
		"ID"
	};


		
		public static final int SHOULD_SHOW = 100;
		
		Map<String, Integer> keywords = new HashMap<String, Integer>(){{
			put("class", DecafParser.CLASS);
			put("Program", DecafParser.PROGRAM);
			put("if", DecafParser.IF);
			put("else", DecafParser.ELSE);
			put("for", DecafParser.FOR);
			put("return", DecafParser.RETURN);
			put("break", DecafParser.BREAK);
			put("continue", DecafParser.CONTINUE);
			put("callout", DecafParser.CALLOUT);
			put("boolean", DecafParser.BOOLEAN);
			put("true", DecafParser.TRUE);
			put("false", DecafParser.FALSE);
			put("int", DecafParser.INT);
			put("void", DecafParser.VOID);		
		}};


	public DecafLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "DecafLexer.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 3: INT_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 4: BOOL_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 10: IDENTIIER_action((RuleContext)_localctx, actionIndex); break;
		case 24: SEMICOLON_action((RuleContext)_localctx, actionIndex); break;
		case 35: CHAR_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		case 36: STRING_LITERAL_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void INT_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: _channel = SHOULD_SHOW; break;
		}
	}
	private void STRING_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 5: _channel = SHOULD_SHOW; break;
		}
	}
	private void SEMICOLON_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: 
			System.out.println("Go here");
		 break;
		}
	}
	private void BOOL_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 3: _channel = SHOULD_SHOW; break;
		}
	}
	private void CHAR_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 4: _channel = SHOULD_SHOW; break;
		}
	}
	private void IDENTIIER_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: 
			
			if(keywords.containsKey(getText())){
				setType(keywords.get(getText()));
			}
			else{
				_channel = SHOULD_SHOW;
			}
		 break;
		}
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2-\u0116\b\1\b\1\b"+
		"\1\b\1\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t"+
		"\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4"+
		"\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4"+
		"\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4"+
		"\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\3\2"+
		"\6\2W\n\2\r\2\16\2X\3\3\3\3\6\3]\n\3\r\3\16\3^\3\4\3\4\3\4\3\5\3\5\5\5"+
		"f\n\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6s\n\6\3\6\3\6\3\7"+
		"\3\7\3\b\3\b\3\t\3\t\5\t}\n\t\3\n\3\n\5\n\u0081\n\n\3\13\3\13\3\13\3\13"+
		"\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\5\r\u008f\n\r\3\16\3\16\3\17\3\17\3\17"+
		"\3\17\3\17\5\17\u0098\n\17\3\20\3\20\3\20\3\20\5\20\u009e\n\20\3\21\3"+
		"\21\3\21\3\21\5\21\u00a4\n\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25"+
		"\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\34"+
		"\3\34\3\35\6\35\u00be\n\35\r\35\16\35\u00bf\3\35\3\35\3\36\3\36\3\36\3"+
		"\36\7\36\u00c8\n\36\f\36\16\36\u00cb\13\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\37\3\37\3\37\3\37\7\37\u00d6\n\37\f\37\16\37\u00d9\13\37\3\37\3\37\3"+
		"\37\3\37\3 \5 \u00e0\n \3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u00ec\n!\3\""+
		"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3$\3$\5$\u00fa\n$\3$\3$\3$\3%\3%\3%\3"+
		"%\3%\3&\3&\3&\3&\3&\3\'\3\'\5\'\u010b\n\'\3\'\3\'\3(\7(\u0110\n(\f(\16"+
		"(\u0113\13(\3(\3(\4\u00c9\u00d7\2)\7\2\t\2\13\21\r\22\17\23\21\2\23\2"+
		"\25\2\27\2\31\24\33\25\35\26\37\27!\30#\31%\32\'\33)\34+\35-\36/\37\61"+
		" \63!\65\"\67#9$;%=&?\'A(C\2E\2G,I-K\2M)O*Q\2S+\7\2\3\4\5\6\t\5\2C\\a"+
		"ac|\3\2\62;\4\2CHch\6\2\'\',-//\61\61\4\2>>@@\5\2\13\f\16\17\"\"\6\2\""+
		"#%(*]_\u0080\u011f\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\31\3\2\2\2"+
		"\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2"+
		"\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2"+
		"\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2"+
		"\2\2\2?\3\2\2\2\2A\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\3K\3\2\2\2\4M\3\2\2\2"+
		"\5O\3\2\2\2\5Q\3\2\2\2\6S\3\2\2\2\7V\3\2\2\2\tZ\3\2\2\2\13`\3\2\2\2\r"+
		"e\3\2\2\2\17r\3\2\2\2\21v\3\2\2\2\23x\3\2\2\2\25|\3\2\2\2\27\u0080\3\2"+
		"\2\2\31\u0082\3\2\2\2\33\u0086\3\2\2\2\35\u008e\3\2\2\2\37\u0090\3\2\2"+
		"\2!\u0097\3\2\2\2#\u009d\3\2\2\2%\u00a3\3\2\2\2\'\u00a5\3\2\2\2)\u00a7"+
		"\3\2\2\2+\u00a9\3\2\2\2-\u00ab\3\2\2\2/\u00ad\3\2\2\2\61\u00af\3\2\2\2"+
		"\63\u00b1\3\2\2\2\65\u00b3\3\2\2\2\67\u00b5\3\2\2\29\u00b8\3\2\2\2;\u00ba"+
		"\3\2\2\2=\u00bd\3\2\2\2?\u00c3\3\2\2\2A\u00d1\3\2\2\2C\u00df\3\2\2\2E"+
		"\u00eb\3\2\2\2G\u00ed\3\2\2\2I\u00f2\3\2\2\2K\u00f9\3\2\2\2M\u00fe\3\2"+
		"\2\2O\u0103\3\2\2\2Q\u010a\3\2\2\2S\u0111\3\2\2\2UW\5\23\b\2VU\3\2\2\2"+
		"WX\3\2\2\2XV\3\2\2\2XY\3\2\2\2Y\b\3\2\2\2Z\\\5\13\4\2[]\5\27\n\2\\[\3"+
		"\2\2\2]^\3\2\2\2^\\\3\2\2\2^_\3\2\2\2_\n\3\2\2\2`a\7\62\2\2ab\7z\2\2b"+
		"\f\3\2\2\2cf\5\7\2\2df\5\t\3\2ec\3\2\2\2ed\3\2\2\2fg\3\2\2\2gh\b\5\2\2"+
		"h\16\3\2\2\2ij\7v\2\2jk\7t\2\2kl\7w\2\2ls\7g\2\2mn\7h\2\2no\7c\2\2op\7"+
		"n\2\2pq\7u\2\2qs\7g\2\2ri\3\2\2\2rm\3\2\2\2st\3\2\2\2tu\b\6\3\2u\20\3"+
		"\2\2\2vw\t\2\2\2w\22\3\2\2\2xy\t\3\2\2y\24\3\2\2\2z}\5\21\7\2{}\5\23\b"+
		"\2|z\3\2\2\2|{\3\2\2\2}\26\3\2\2\2~\u0081\5\23\b\2\177\u0081\t\4\2\2\u0080"+
		"~\3\2\2\2\u0080\177\3\2\2\2\u0081\30\3\2\2\2\u0082\u0083\5\21\7\2\u0083"+
		"\u0084\3\2\2\2\u0084\u0085\b\13\4\2\u0085\32\3\2\2\2\u0086\u0087\5S(\2"+
		"\u0087\u0088\b\f\5\2\u0088\34\3\2\2\2\u0089\u008f\7?\2\2\u008a\u008b\7"+
		"-\2\2\u008b\u008f\7?\2\2\u008c\u008d\7/\2\2\u008d\u008f\7?\2\2\u008e\u0089"+
		"\3\2\2\2\u008e\u008a\3\2\2\2\u008e\u008c\3\2\2\2\u008f\36\3\2\2\2\u0090"+
		"\u0091\t\5\2\2\u0091 \3\2\2\2\u0092\u0098\t\6\2\2\u0093\u0094\7>\2\2\u0094"+
		"\u0098\7?\2\2\u0095\u0096\7@\2\2\u0096\u0098\7?\2\2\u0097\u0092\3\2\2"+
		"\2\u0097\u0093\3\2\2\2\u0097\u0095\3\2\2\2\u0098\"\3\2\2\2\u0099\u009a"+
		"\7?\2\2\u009a\u009e\7?\2\2\u009b\u009c\7#\2\2\u009c\u009e\7?\2\2\u009d"+
		"\u0099\3\2\2\2\u009d\u009b\3\2\2\2\u009e$\3\2\2\2\u009f\u00a0\7(\2\2\u00a0"+
		"\u00a4\7(\2\2\u00a1\u00a2\7~\2\2\u00a2\u00a4\7~\2\2\u00a3\u009f\3\2\2"+
		"\2\u00a3\u00a1\3\2\2\2\u00a4&\3\2\2\2\u00a5\u00a6\7#\2\2\u00a6(\3\2\2"+
		"\2\u00a7\u00a8\7?\2\2\u00a8*\3\2\2\2\u00a9\u00aa\7/\2\2\u00aa,\3\2\2\2"+
		"\u00ab\u00ac\7}\2\2\u00ac.\3\2\2\2\u00ad\u00ae\7\177\2\2\u00ae\60\3\2"+
		"\2\2\u00af\u00b0\7]\2\2\u00b0\62\3\2\2\2\u00b1\u00b2\7_\2\2\u00b2\64\3"+
		"\2\2\2\u00b3\u00b4\7.\2\2\u00b4\66\3\2\2\2\u00b5\u00b6\7=\2\2\u00b6\u00b7"+
		"\b\32\6\2\u00b78\3\2\2\2\u00b8\u00b9\7*\2\2\u00b9:\3\2\2\2\u00ba\u00bb"+
		"\7+\2\2\u00bb<\3\2\2\2\u00bc\u00be\t\7\2\2\u00bd\u00bc\3\2\2\2\u00be\u00bf"+
		"\3\2\2\2\u00bf\u00bd\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1"+
		"\u00c2\b\35\7\2\u00c2>\3\2\2\2\u00c3\u00c4\7\61\2\2\u00c4\u00c5\7,\2\2"+
		"\u00c5\u00c9\3\2\2\2\u00c6\u00c8\13\2\2\2\u00c7\u00c6\3\2\2\2\u00c8\u00cb"+
		"\3\2\2\2\u00c9\u00ca\3\2\2\2\u00c9\u00c7\3\2\2\2\u00ca\u00cc\3\2\2\2\u00cb"+
		"\u00c9\3\2\2\2\u00cc\u00cd\7,\2\2\u00cd\u00ce\7\61\2\2\u00ce\u00cf\3\2"+
		"\2\2\u00cf\u00d0\b\36\7\2\u00d0@\3\2\2\2\u00d1\u00d2\7\61\2\2\u00d2\u00d3"+
		"\7\61\2\2\u00d3\u00d7\3\2\2\2\u00d4\u00d6\13\2\2\2\u00d5\u00d4\3\2\2\2"+
		"\u00d6\u00d9\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d7\u00d5\3\2\2\2\u00d8\u00da"+
		"\3\2\2\2\u00d9\u00d7\3\2\2\2\u00da\u00db\7\f\2\2\u00db\u00dc\3\2\2\2\u00dc"+
		"\u00dd\b\37\7\2\u00ddB\3\2\2\2\u00de\u00e0\t\b\2\2\u00df\u00de\3\2\2\2"+
		"\u00e0D\3\2\2\2\u00e1\u00e2\7^\2\2\u00e2\u00ec\7$\2\2\u00e3\u00e4\7^\2"+
		"\2\u00e4\u00ec\7^\2\2\u00e5\u00e6\7^\2\2\u00e6\u00ec\7)\2\2\u00e7\u00e8"+
		"\7^\2\2\u00e8\u00ec\7p\2\2\u00e9\u00ea\7^\2\2\u00ea\u00ec\7v\2\2\u00eb"+
		"\u00e1\3\2\2\2\u00eb\u00e3\3\2\2\2\u00eb\u00e5\3\2\2\2\u00eb\u00e7\3\2"+
		"\2\2\u00eb\u00e9\3\2\2\2\u00ecF\3\2\2\2\u00ed\u00ee\7)\2\2\u00ee\u00ef"+
		"\3\2\2\2\u00ef\u00f0\b\"\b\2\u00f0\u00f1\b\"\t\2\u00f1H\3\2\2\2\u00f2"+
		"\u00f3\7$\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f5\b#\b\2\u00f5\u00f6\b#\n"+
		"\2\u00f6J\3\2\2\2\u00f7\u00fa\5C \2\u00f8\u00fa\5E!\2\u00f9\u00f7\3\2"+
		"\2\2\u00f9\u00f8\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00fc\b$\b\2\u00fc"+
		"\u00fd\b$\13\2\u00fdL\3\2\2\2\u00fe\u00ff\7)\2\2\u00ff\u0100\3\2\2\2\u0100"+
		"\u0101\b%\f\2\u0101\u0102\b%\r\2\u0102N\3\2\2\2\u0103\u0104\7$\2\2\u0104"+
		"\u0105\3\2\2\2\u0105\u0106\b&\f\2\u0106\u0107\b&\16\2\u0107P\3\2\2\2\u0108"+
		"\u010b\5C \2\u0109\u010b\5E!\2\u010a\u0108\3\2\2\2\u010a\u0109\3\2\2\2"+
		"\u010b\u010c\3\2\2\2\u010c\u010d\b\'\b\2\u010dR\3\2\2\2\u010e\u0110\5"+
		"\25\t\2\u010f\u010e\3\2\2\2\u0110\u0113\3\2\2\2\u0111\u010f\3\2\2\2\u0111"+
		"\u0112\3\2\2\2\u0112\u0114\3\2\2\2\u0113\u0111\3\2\2\2\u0114\u0115\b("+
		"\17\2\u0115T\3\2\2\2\31\2\3\4\5\6X^er|\u0080\u008e\u0097\u009d\u00a3\u00bf"+
		"\u00c9\u00d7\u00df\u00eb\u00f9\u010a\u0111\20\3\5\4\3\6\5\7\6\2\3\f\2"+
		"\3\32\3\b\2\2\5\2\2\4\3\2\4\5\2\4\4\2\4\2\2\3%\6\3&\7\6\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}